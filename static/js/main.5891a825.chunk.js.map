{"version":3,"sources":["firebase.js","Book.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Book","props","onClick","database","ref","bookId","remove","bookTitle","App","handleSubmit","event","preventDefault","state","userInput","push","setState","handleUserIput","target","value","books","on","result","data","val","booksArray","key","bookName","console","log","className","action","onSubmit","this","type","id","onChange","map","book","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RAiBAA,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,cACnBC,MAAO,6CAOMR,QAAf,ECVeS,MATf,SAAcC,GAKZ,OACE,wBAAIC,QALa,WACDX,EAASY,WAAWC,IAAIH,EAAMI,QACtCC,WAGkBL,EAAMM,YC8DrBC,E,kDAjEb,aAAe,IAAD,8BAEZ,gBAyBFC,aAAe,SAACC,IACdA,EAAMC,iBACuB,KAAzB,EAAKC,MAAMC,aACCtB,EAASY,WAAWC,MAC5BU,KAAK,EAAKF,MAAMC,WACtB,EAAKE,SAAS,CACZF,UAAW,OAjCH,EAqCdG,eAAiB,SAACN,GAGhB,EAAKK,SAAS,CACZF,UAAWH,EAAMO,OAAOC,SAtC1B,EAAKN,MAAQ,CACXO,MAAO,GACPN,UAAW,IALD,E,gEASO,IAAD,OAEJtB,EAASY,WAAWC,MAC5BgB,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAOD,EAAOE,MAIdC,EAAa,GACnB,IAAK,IAAIC,KAAOH,EACdE,EAAWV,KAAK,CAAEY,SAAUJ,EAAKG,GAAMpB,OAAQoB,IAEjDE,QAAQC,IAAIJ,GACZ,EAAKT,SAAS,CACZI,MAAOK,S,+BAuBX,OADAG,QAAQC,IAAIrC,GAEV,yBAAKsC,UAAU,OACb,sEACA,0BAAMC,OAAO,GAAGC,SAAUC,KAAKvB,cAC7B,2BAAOwB,KAAK,OAAOC,GAAG,WAAWhB,MAAOc,KAAKpB,MAAMC,UAAWsB,SAAUH,KAAKhB,iBAC7E,4BAAQiB,KAAK,UAAb,aAEF,4BACGD,KAAKpB,MAAMO,MAAMiB,KAAI,SAACC,GAErB,OADAV,QAAQC,IAAIS,EAAKhC,QAEf,kBAAC,EAAD,CAAMA,OAAQgC,EAAKhC,OAAQE,UAAW8B,EAAKX,oB,GA1DvCY,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.5891a825.chunk.js","sourcesContent":["\r\nimport firebase from 'firebase/app'\r\nimport 'firebase/database'\r\n\r\n\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAIBPuWWVfA0NThgpSltustP0WAvEdcYYw\",\r\n  authDomain: \"thebookshelf-de2fa.firebaseapp.com\",\r\n  databaseURL: \"https://thebookshelf-de2fa.firebaseio.com\",\r\n  projectId: \"thebookshelf-de2fa\",\r\n  storageBucket: \"thebookshelf-de2fa.appspot.com\",\r\n  messagingSenderId: \"74952590677\",\r\n  appId: \"1:74952590677:web:766830e9d1bc2638859bdc\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\n\r\nexport default firebase;","import React from 'react'\r\nimport firebase from './firebase'\r\nfunction Book(props) {\r\n  const deleteItem = () => {\r\n    const itemRef = firebase.database().ref(props.bookId)\r\n    itemRef.remove()\r\n  }\r\n  return (\r\n    <li onClick={deleteItem}>{props.bookTitle}</li>\r\n  )\r\n}\r\nexport default Book","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from './firebase';\nimport Book from './Book';\nclass App extends Component {\n  constructor() {\n    //put all the book titles in an array (in state) and map over them. \n    super();\n    this.state = {\n      books: [],\n      userInput: \"\"\n    }\n  }\n  //grab the list of books from our database\n  componentDidMount() {\n    //set up listener to firebase database\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (result) => {\n      const data = result.val();\n      //turn data from an object into an array\n      //THIS IS ANOTHER OPTION FOR TURNING AN OBJECT INTO AN ARRAY\n      // const bookArray = Object.values()\n      const booksArray = []\n      for (let key in data) {\n        booksArray.push({ bookName: data[key], bookId: key })\n      }\n      console.log(booksArray)\n      this.setState({\n        books: booksArray\n      })\n    })\n  }\n  handleSubmit = (event) => {\n    event.preventDefault()\n    if (this.state.userInput !== '') {\n      const dbRef = firebase.database().ref()\n      dbRef.push(this.state.userInput)\n      this.setState({\n        userInput: ''\n      })\n    }\n  }\n  handleUserIput = (event) => {\n    //take event.target.value (what the user is typing)\n    //put it into this.state.userInput\n    this.setState({\n      userInput: event.target.value\n    })\n  }\n  render() {\n    console.log(firebase)\n    return (\n      <div className=\"App\">\n        <h1>üìì My Bookshelf üçé</h1>\n        <form action=\"\" onSubmit={this.handleSubmit}>\n          <input type=\"text\" id=\"userBook\" value={this.state.userInput} onChange={this.handleUserIput} />\n          <button type=\"submit\">Add Book</button>\n        </form>\n        <ul>\n          {this.state.books.map((book) => {\n            console.log(book.bookId)\n            return (\n              <Book bookId={book.bookId} bookTitle={book.bookName} />\n            )\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}